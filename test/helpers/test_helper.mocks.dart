// Mocks generated by Mockito 5.4.6 from annotations
// in dcresto/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i3;
import 'package:dcresto/core/errors/failures.dart' as _i7;
import 'package:dcresto/features/restaurant_detail/domain/entities/review.dart'
    as _i11;
import 'package:dcresto/features/restaurant_list/domain/entities/restaurant.dart'
    as _i8;
import 'package:dcresto/features/restaurant_list/domain/repositories/restaurant_repository.dart'
    as _i2;
import 'package:dcresto/features/restaurant_list/domain/usecases/get_restaurants.dart'
    as _i5;
import 'package:dcresto/features/restaurant_list/domain/usecases/search_restaurants.dart'
    as _i9;
import 'package:dcresto/features/review/domain/repositories/review_repository.dart'
    as _i4;
import 'package:dcresto/features/review/domain/usecases/add_review.dart'
    as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRestaurantRepository_0 extends _i1.SmartFake
    implements _i2.RestaurantRepository {
  _FakeRestaurantRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeReviewRepository_2 extends _i1.SmartFake
    implements _i4.ReviewRepository {
  _FakeReviewRepository_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetRestaurants].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRestaurants extends _i1.Mock implements _i5.GetRestaurants {
  MockGetRestaurants() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RestaurantRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeRestaurantRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.RestaurantRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, List<_i8.Restaurant>>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue:
                _i6.Future<_i3.Either<_i7.Failure, List<_i8.Restaurant>>>.value(
                  _FakeEither_1<_i7.Failure, List<_i8.Restaurant>>(
                    this,
                    Invocation.method(#call, []),
                  ),
                ),
          )
          as _i6.Future<_i3.Either<_i7.Failure, List<_i8.Restaurant>>>);
}

/// A class which mocks [SearchRestaurants].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchRestaurants extends _i1.Mock implements _i9.SearchRestaurants {
  MockSearchRestaurants() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RestaurantRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeRestaurantRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.RestaurantRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, List<_i8.Restaurant>>> call(
    String? query,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [query]),
            returnValue:
                _i6.Future<_i3.Either<_i7.Failure, List<_i8.Restaurant>>>.value(
                  _FakeEither_1<_i7.Failure, List<_i8.Restaurant>>(
                    this,
                    Invocation.method(#call, [query]),
                  ),
                ),
          )
          as _i6.Future<_i3.Either<_i7.Failure, List<_i8.Restaurant>>>);
}

/// A class which mocks [AddReview].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddReview extends _i1.Mock implements _i10.AddReview {
  MockAddReview() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ReviewRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeReviewRepository_2(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i4.ReviewRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, List<_i11.Review>>> call({
    required String? id,
    required String? name,
    required String? review,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #id: id,
              #name: name,
              #review: review,
            }),
            returnValue:
                _i6.Future<_i3.Either<_i7.Failure, List<_i11.Review>>>.value(
                  _FakeEither_1<_i7.Failure, List<_i11.Review>>(
                    this,
                    Invocation.method(#call, [], {
                      #id: id,
                      #name: name,
                      #review: review,
                    }),
                  ),
                ),
          )
          as _i6.Future<_i3.Either<_i7.Failure, List<_i11.Review>>>);
}

/// A class which mocks [ReviewRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockReviewRepository extends _i1.Mock implements _i4.ReviewRepository {
  MockReviewRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.Either<_i7.Failure, List<_i11.Review>>> addReview({
    required String? id,
    required String? name,
    required String? review,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#addReview, [], {
              #id: id,
              #name: name,
              #review: review,
            }),
            returnValue:
                _i6.Future<_i3.Either<_i7.Failure, List<_i11.Review>>>.value(
                  _FakeEither_1<_i7.Failure, List<_i11.Review>>(
                    this,
                    Invocation.method(#addReview, [], {
                      #id: id,
                      #name: name,
                      #review: review,
                    }),
                  ),
                ),
          )
          as _i6.Future<_i3.Either<_i7.Failure, List<_i11.Review>>>);
}
